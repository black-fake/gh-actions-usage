name: Scheduled Check and Release

on:
  schedule:
    # Run the workflow every 5 minutes
    - cron: '*/5 * * * *'

permissions:
  contents: write  # Required to interact with the repository

jobs:
  check-and-release:
    name: Create Release if main branch changed
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full history is fetched for tag comparison
          ref: main

      # Step 2: Get the latest release tag
      - name: Get latest release tag
        id: get_latest_release
        run: |
          # Fetch the latest release tag using git
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)

          if [ -z "$LATEST_TAG" ]; then
            echo "No previous release tag found, assuming initial release."
            echo "PREVIOUS_TAG_EXISTS=false" >> $GITHUB_ENV
          else
            echo "Latest release tag: $LATEST_TAG"
            echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
            echo "PREVIOUS_TAG_EXISTS=true" >> $GITHUB_ENV
          fi

      # Step 3: Check if there are changes since the latest release tag
      - name: Check for changes in `main`
        id: check_changes
        run: |
          if [ "$PREVIOUS_TAG_EXISTS" = "false" ]; then
            echo "No changes detected since no previous release exists."
            echo "RELEASE_NEEDED=true" >> $GITHUB_ENV
            exit 0
          fi

          # Fetch the origin/main branch to ensure it's in sync
          git fetch origin main

          # Compare the repository since the latest tag to HEAD on the main branch
          CHANGED_FILES=$(git diff $LATEST_TAG..origin/main --name-only)

          if [ -n "$CHANGED_FILES" ]; then
            echo "Changes detected since the latest release:"
            echo "$CHANGED_FILES"
            echo "RELEASE_NEEDED=true" >> $GITHUB_ENV
            echo "$CHANGED_FILES" > changes.txt
          else
            echo "No changes detected since the latest release."
            echo "RELEASE_NEEDED=false" >> $GITHUB_ENV
          fi

#      # Step 4: Create a release if changes are found
#      - name: Create Release
#        if: env.RELEASE_NEEDED == 'true'
#        uses: actions/create-release@v1.1.4
#        with:
#          tag_name: v${{ github.run_number }} # Incremental release tag
#          release_name: Release v${{ github.run_number }}
#          body: |
#            This release contains the following changes since the last release:
#            $(cat changes.txt)
#          prerelease: false
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}