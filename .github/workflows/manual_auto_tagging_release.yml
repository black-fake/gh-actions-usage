name: Manual Auto Tagging Release

permissions:
  contents: write
  pull-requests: read

on:
  push:
    branches:
      - main

jobs:
  check-and-release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Get the latest release tag
      - name: Get Latest Tag for creating new Release
        id: get_latest_release
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0  || echo "v0.0.0")
          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV
          echo "LATEST_TAG=${LATEST_TAG}"

      # Step 3: Fetch pull requests merged since the last release
      - name: Get Pull Requests Since Last Release
        id: get_prs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          COMMIT: ${{ github.sha }}
        run: |
          # Get the date of the latest release
          RELEASE_DATE=$(git log -1 --format=%ai ${LATEST_TAG})
          echo "Release date: $RELEASE_DATE"
          
          # built-in variables
          echo "REPO: $GITHUB_REPOSITORY"
          echo "SHA: $GITHUB_SHA"

          # Use the GitHub CLI to fetch merged PRs since the latest tag
          set -x
          PRS=$(gh api -H "Authorization: Bearer $GITHUB_TOKEN"  /repos/$REPO/commits/$COMMIT/pulls --jq '.[].title')
          echo "Merged PRs: $PRS"
          echo "PRS<<EOF" >> $GITHUB_ENV
          echo "$PRS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          set -x

      # Step 4: Determine the highest bump type from PR titles
      - name: Determine Bump from PR Titles
        id: determine_bump
        run: |
          PRS="${{ env.PRS }}"
          echo "Analyzing PR Titles for Bumps: ${{ env.PRS }}"

          # Initialize default bump type as patch
          # BUMP_TYPE="patch"

          set -x
          # Check for #major, #minor, or #patch in PR titles and determine the highest bump
          if echo "${{ env.PRS }}" | grep -q "#major"; then
            BUMP_TYPE="major"
          elif echo "${{ env.PRS }}" | grep -q "#minor"; then
            BUMP_TYPE="minor"
          elif echo "${{ env.PRS }}" | grep -q "#patch"; then
            BUMP_TYPE="patch"
          else
            BUMP_TYPE="fist_bump_in_the_face"
          fi
          set +x

          echo "Determined Bump Type: $BUMP_TYPE"
          echo "INPUT_BUMP=$BUMP_TYPE" >> $GITHUB_ENV

      # Step 5: Determine next semantic version
      - name: Calculate Next Semantic Version
        id: determine_next_version
        run: |
          LATEST_TAG=${LATEST_TAG:-"v0.0.0"}
          BASE_VERSION="${LATEST_TAG#v}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"

          if [ -z "$MINOR" ]; then
            MINOR=0
          fi
          if [ -z "$PATCH" ]; then
            PATCH=0
          fi

          if [ "$INPUT_BUMP" = "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$INPUT_BUMP" = "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [ "$INPUT_BUMP" = "patch" ]; then
            PATCH=$((PATCH + 1))
          elif [ "$INPUT_BUMP" = "fist_bump_in_the_face" ]; then
            echo "ðŸ‘Š You're getting a virtual punch in the face! Why?" >&2
            echo "Because you didn't use proper tags like #major, #minor, or #patch in your Pull Request titles." >&2
            echo "Fix your PR tags and try again!" >&2
            exit 42
          else
            echo "ðŸ’¥ Unexpected error: Invalid bump type '$INPUT_BUMP'." >&2
            exit 1
          fi

          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "New Version: $NEW_VERSION"
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT

      # Step 6: Create and push tag
      - name: Create and push tag
        run: |
          NEW_VERSION=${{ steps.determine_next_version.outputs.new_version }}
          
          # Create the new tag and push it
          git tag $NEW_VERSION
          git push origin $NEW_VERSION